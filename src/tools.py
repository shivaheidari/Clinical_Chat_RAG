from langchain_core.tools import tool
import json

# --- Tool 1: Saving the Summary to a File ---
@tool
def save_summary_to_file(summary_text: str, patient_id: int) -> str:
    """
    Saves the final clinical summary text to a local file for permanent storage.
    The summary is saved as a .txt file named after the patient ID.
    
    Args:
        summary_text: The complete summary generated by the AI.
        patient_id: The unique ID of the patient (e.g., 1001, 1002).
        
    Returns:
        A success message indicating the file path.
    """
    filename = f"summaries/patient_{patient_id}_summary.txt"
    os.makedirs("summaries", exist_ok=True)
    try:
        with open(filename, "w") as f:
            f.write(summary_text)
        return f"Successfully saved summary for Patient {patient_id} to {filename}"
    except Exception as e:
        return f"Error saving file: {e}"

# --- Tool 2: Sending an Email (Mocked) ---
@tool
def send_alert_email(recipient: str, subject: str, body: str) -> str:
    """
    Mocks sending an urgent email alert about a clinical finding to a specified recipient.
    (In a real application, this would use an SMTP library like smtplib).
    
    Args:
        recipient: The email address to send the alert to (e.g., doctor@clinic.org).
        subject: The subject line of the email.
        body: The main content of the email.
        
    Returns:
        A confirmation message detailing the mock email sent.
    """
    return (f"MOCK EMAIL SENT: To: {recipient}, Subject: {subject}. "
            f"Body starts with: {body[:50]}...")

# List of all tools available to the Agent
CLINICAL_TOOLS = [save_summary_to_file, send_alert_email]