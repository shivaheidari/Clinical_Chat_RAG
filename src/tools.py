from langchain_core.tools import tool
import json
import smtplib 


# --- Tool 1: Saving the Summary to a File ---
@tool
def save_summary_to_file(summary_text: str, patient_id: int) -> str:
    """
    Saves the final clinical summary text to a local file for permanent storage.
    The summary is saved as a .txt file named after the patient ID.
    
    Args:
        summary_text: The complete summary generated by the AI.
        patient_id: The unique ID of the patient (e.g., 1001, 1002).
        
    Returns:
        A success message indicating the file path.
    """
    filename = f"summaries/patient_{patient_id}_summary.txt"
    os.makedirs("summaries", exist_ok=True)
    try:
        with open(filename, "w") as f:
            f.write(summary_text)
        return f"Successfully saved summary for Patient {patient_id} to {filename}"
    except Exception as e:
        return f"Error saving file: {e}"

# --- Tool 2: Sending an Email (Mocked) ---
@tool
def send_alert_email(recipient: str, subject: str, body: str) -> str:
    """
    Sends an urgent email alert about a clinical finding to a specified recipient.
    Requires SENDER_EMAIL, EMAIL_APP_PASSWORD, SMTP_SERVER, and SMTP_PORT 
    to be set as environment variables.

    Args:
        recipient: The single email address to send the alert to (e.g., doctor@clinic.org).
        subject: The subject line of the email (e.g., "URGENT: Patient 1 Critical Update").
        body: The main content of the email (the clinical summary).
        
    Returns:
        A confirmation message detailing the status of the sent email.
    """
    # 1. Retrieve credentials from environment
    sender_email = os.environ.get("SENDER_EMAIL")
    app_password = os.environ.get("EMAIL_APP_PASSWORD")
    smtp_server = os.environ.get("SMTP_SERVER")
    smtp_port = os.environ.get("SMTP_PORT")

    if not all([sender_email, app_password, smtp_server, smtp_port]):
        return "ERROR: Email credentials (SENDER_EMAIL/PASSWORD/SMTP_SERVER) are not configured."

    # 2. Build the message object
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = recipient
    msg.set_content(body)

    # 3. Connect to the SMTP server and send the email
    try:
        # Use a context manager for the server connection
        with smtplib.SMTP(smtp_server, int(smtp_port)) as server:
            # Encrypt the connection (mandatory for most servers)
            server.starttls() 
            # Log in using the App Password
            server.login(sender_email, app_password)
            # Send the mail!
            server.send_message(msg)
            
        return f"SUCCESS: Clinical Alert Email sent to {recipient} with subject: '{subject}'"
        
    except smtplib.SMTPAuthenticationError:
        return "ERROR: Failed to log in. Check SENDER_EMAIL and EMAIL_APP_PASSWORD."
    except Exception as e:
        return f"ERROR: Could not send email due to a connection error: {e}

# List of all tools available to the Agent
CLINICAL_TOOLS = [save_summary_to_file, send_alert_email]